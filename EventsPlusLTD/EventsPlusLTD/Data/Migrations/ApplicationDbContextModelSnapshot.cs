// <auto-generated />
using System;
using EventsPlusLTD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsPlusLTD.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EventsPlus_LTD.Models.Attendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City");

                    b.Property<DateTime>("AttDoB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DoB");

                    b.Property<string>("AttEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("AttFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstName");

                    b.Property<int>("AttGender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("AttLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LastName");

                    b.Property<string>("AttPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("AttPostcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Postcode");

                    b.Property<string>("AttStreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StreetAddress");

                    b.HasKey("ID");

                    b.HasIndex("AttCity");

                    b.HasIndex("AttDoB");

                    b.HasIndex("AttEmail")
                        .IsUnique();

                    b.HasIndex("AttFirstName");

                    b.HasIndex("AttGender");

                    b.HasIndex("AttLastName");

                    b.HasIndex("AttPhoneNumber");

                    b.HasIndex("AttPostcode");

                    b.HasIndex("AttStreetAddress");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AttendeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BookingDate");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("PaymentConfirmed?");

                    b.Property<int>("QuantityTickets")
                        .HasColumnType("int")
                        .HasColumnName("Quantityoftickets");

                    b.Property<float?>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("real")
                        .HasColumnName("TotalPrice");

                    b.HasKey("ID");

                    b.HasIndex("AttendeeID");

                    b.HasIndex("BookingDate");

                    b.HasIndex("EventID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("PaymentConfirmed");

                    b.HasIndex("QuantityTickets");

                    b.HasIndex("TotalPrice");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDateandTime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EventName");

                    b.Property<byte?>("EventPicture")
                        .HasColumnType("tinyint")
                        .HasColumnName("EventPictureOne");

                    b.Property<int>("EventStatus")
                        .HasColumnType("int")
                        .HasColumnName("EventStatus");

                    b.Property<int>("EventType")
                        .HasColumnType("int")
                        .HasColumnName("EventType");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDate");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RegistrationEndDate");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDateandTime");

                    b.Property<float>("TicketPrice")
                        .HasColumnType("real")
                        .HasColumnName("TicketPrice");

                    b.HasKey("ID");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Description");

                    b.HasIndex("EndDateTime");

                    b.HasIndex("EventName");

                    b.HasIndex("EventPicture");

                    b.HasIndex("EventStatus");

                    b.HasIndex("EventType");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("ModifiedDate");

                    b.HasIndex("OrganizerID");

                    b.HasIndex("RegistrationEndDate");

                    b.HasIndex("StartDateTime");

                    b.HasIndex("TicketPrice");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Organizer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("OrgCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City");

                    b.Property<DateTime>("OrgDoB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DoB");

                    b.Property<string>("OrgEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("OrgFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstName");

                    b.Property<int>("OrgGender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("OrgLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LastName");

                    b.Property<string>("OrgPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("OrgPostcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Postcode");

                    b.Property<string>("OrgStreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StreetAddress");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("OrgCity");

                    b.HasIndex("OrgDoB");

                    b.HasIndex("OrgEmail")
                        .IsUnique();

                    b.HasIndex("OrgFirstName");

                    b.HasIndex("OrgGender");

                    b.HasIndex("OrgLastName");

                    b.HasIndex("OrgPhoneNumber");

                    b.HasIndex("OrgPostcode");

                    b.HasIndex("OrgStreetAddress");

                    b.ToTable("Organizer");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("CardNumber");

                    b.Property<int>("CardType")
                        .HasColumnType("int")
                        .HasColumnName("CardType");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nameoncard");

                    b.Property<int>("SecurityCode")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("SecurityCode");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CardNumber")
                        .IsUnique();

                    b.HasIndex("CardType");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("NameOnCard");

                    b.HasIndex("SecurityCode");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Venue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Postcode");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StreetAddress");

                    b.Property<int>("VenueCapacity")
                        .HasMaxLength(8)
                        .HasColumnType("int")
                        .HasColumnName("VenueCapacity");

                    b.Property<byte?>("VenuePictureOne")
                        .HasColumnType("tinyint")
                        .HasColumnName("VenuePictureOne");

                    b.Property<byte?>("VenuePictureThree")
                        .HasColumnType("tinyint")
                        .HasColumnName("VenuePictureThree");

                    b.Property<byte?>("VenuePictureTwo")
                        .HasColumnType("tinyint")
                        .HasColumnName("VenuePictureTwo");

                    b.HasKey("ID");

                    b.HasIndex("City");

                    b.HasIndex("EventID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("Postcode");

                    b.HasIndex("StreetAddress");

                    b.HasIndex("VenueCapacity");

                    b.HasIndex("VenuePictureOne");

                    b.HasIndex("VenuePictureThree");

                    b.HasIndex("VenuePictureTwo");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Booking", b =>
                {
                    b.HasOne("EventsPlus_LTD.Models.Attendee", "Attendee")
                        .WithMany("Bookings")
                        .HasForeignKey("AttendeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsPlus_LTD.Models.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Event", b =>
                {
                    b.HasOne("EventsPlus_LTD.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Payment", b =>
                {
                    b.HasOne("EventsPlus_LTD.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Venue", b =>
                {
                    b.HasOne("EventsPlus_LTD.Models.Event", "Event")
                        .WithMany("Venues")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Attendee", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Event", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("EventsPlus_LTD.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
